pipeline:
  name: End to End
  identifier: End_to_End
  projectIdentifier: Demo
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Build Test and Push
        identifier: Test_Build_and_Push
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: RunTests
                  name: Run Tests with Intelligence
                  identifier: runTestsWithIntelligence
                  spec:
                    connectorRef: account.harnessImage
                    image: maven:3.5.2-jdk-8-alpine
                    language: Java
                    buildTool: Maven
                    args: test
                    packages: io.harness.
                    runOnlySelectedTests: true
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "**/*.xml"
                    resources:
                      limits:
                        memory: 1000Mi
                        cpu: "1"
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - step:
                  type: Run
                  name: Build Java App
                  identifier: Build_Java_App
                  spec:
                    connectorRef: account.harnessImage
                    image: maven:3.5.2-jdk-8-alpine
                    shell: Sh
                    command: |
                      mvn clean package -DskipTests
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: gcpaccount
              namespace: build
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          serviceDependencies:
            - identifier: dind
              name: dind
              type: Service
              spec:
                connectorRef: account.harnessImage
                image: docker:dind
                privileged: true
                resources:
                  limits:
                    memory: 2048Mi
                    cpu: 1000m
          sharedPaths:
            - /var/run
        variables:
          - name: sto_api_key
            type: Secret
            value: sto_api_key
          - name: sto_dump_runner_logs
            type: String
            value: "true"
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Ignore
    - stage:
        name: Deploy to Dev
        identifier: Deploy
        description: ""
        type: Deployment
        spec:
          serviceConfig:
            serviceRef: nginx
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
                manifests:
                  - manifest:
                      identifier: nginx
                      type: K8sManifest
                      spec:
                        store:
                          type: Github
                          spec:
                            connectorRef: demo
                            gitFetchType: Branch
                            paths:
                              - k8s_manifest/jhttp_deployment.yaml
                            repoName: demo
                            branch: main
                        skipResourceVersioning: false
                artifacts: {}
          infrastructure:
            environmentRef: dev
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: harnessse
                namespace: dev
                releaseName: release-<+INFRA_KEY>
            allowSimultaneousDeployments: true
          execution:
            steps:
              - stepGroup:
                  name: Terraform Plan and Apply
                  identifier: Terraform_Plan_and_Apply
                  steps:
                    - parallel:
                        - step:
                            type: TerraformPlan
                            name: TF Plan AWS
                            identifier: TF_Plan_S3
                            spec:
                              configuration:
                                command: Apply
                                configFiles:
                                  store:
                                    type: Github
                                    spec:
                                      gitFetchType: Branch
                                      connectorRef: danf_gh
                                      repoName: terraform_scripts
                                      branch: main
                                      folderPath: aws
                                secretManagerRef: harnessSecretManager
                                varFiles:
                                  - varFile:
                                      identifier: terraform.tfvars
                                      spec:
                                        content: |-
                                          aws_region = "us-east-1"
                                          access_key = "<+secrets.getValue("danfawsaccesskeyid")>"
                                          secret_key = "<+secrets.getValue("danfawssecretaccesskey")>"
                                      type: Inline
                              provisionerIdentifier: tfawss31
                              delegateSelectors:
                                - danfterraform
                            timeout: 10m
                            failureStrategies: []
                        - step:
                            type: TerraformPlan
                            name: TF Plan Az
                            identifier: TF_Plan_Blob
                            spec:
                              configuration:
                                command: Apply
                                configFiles:
                                  store:
                                    type: Github
                                    spec:
                                      gitFetchType: Branch
                                      connectorRef: danf_gh
                                      repoName: terraform_scripts
                                      branch: main
                                      folderPath: azure
                                secretManagerRef: harnessSecretManager
                                varFiles:
                                  - varFile:
                                      identifier: terraform.tfvars
                                      spec:
                                        content: |-
                                          tenant_id = "<+secrets.getValue("danaztenantid")>"
                                          subscription_id = "<+secrets.getValue("danazsubscriptionid")>"
                                          client_id = "<+secrets.getValue("danazclientid")>"
                                          client_secret = "<+secrets.getValue("danazclientsecret")>"
                                      type: Inline
                              provisionerIdentifier: tfazblob1
                              delegateSelectors:
                                - danfterraform
                            timeout: 10m
                            failureStrategies: []
                    - parallel:
                        - step:
                            type: TerraformApply
                            name: TF Apply AWS
                            identifier: TF_Apply_S3
                            spec:
                              provisionerIdentifier: tfawss31
                              configuration:
                                type: InheritFromPlan
                            timeout: 10m
                            when:
                              stageStatus: Success
                            failureStrategies: []
                        - step:
                            type: TerraformApply
                            name: TF Apply Az
                            identifier: TF_Apply_AzBlob
                            spec:
                              provisionerIdentifier: tfazblob1
                              configuration:
                                type: InheritFromPlan
                            timeout: 10m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
                  spec: {}
              - step:
                  type: JiraCreate
                  name: Open Jira Ticket
                  identifier: Open_Jira_Ticket
                  spec:
                    connectorRef: account.Harness_JIRA
                    projectKey: HD
                    issueType: Story
                    fields:
                      - name: Summary
                        value: Ticket to Track deployment
                      - name: Description
                        value: " Pipeline Name: <+pipeline.name> \\\\ Service Name: <+pipeline.variables.serviceName> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/orgs/default/projects/CD_Demo/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                  timeout: 1d
              - step:
                  type: ShellScript
                  name: Check Provenance
                  identifier: checkProvenance
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: echo "checking shas...."
                    environmentVariables: []
                    outputVariables: []
                    executionTarget: {}
                  timeout: 10m
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - step:
                  type: ShellScript
                  name: DAST Scan
                  identifier: DAST_Scan
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          export LC_ALL=C.UTF-8
                          export LANG=C.UTF-8
                          rm zn_cli_ubuntu1804_20210409
                          curl -uchris.lucca@gmail.com:APAbZApbEn2oNhToGc9fEEUHys3 -O "https://clucca.jfrog.io/artifactory/zn/zn_cli_ubuntu1804_20210409"
                          chmod 777 zn_cli_ubuntu1804_20210409
                          mkdir -p ./results
                          ./zn_cli_ubuntu1804_20210409 --api_key <+secrets.getValue("zntoken")> --code_path . --results_path ./results --policy_id eTbXKi_eR_G7reguT-sDvA
                    environmentVariables: []
                    outputVariables: []
                    executionTarget: {}
                  timeout: 10m
                  when:
                    stageStatus: Success
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  type: JiraUpdate
                  name: Update Jira
                  identifier: Update_JIRA
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.Deploy.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    fields:
                      - name: Comment
                        value: Succesfully Passed "CheckProvenance"
                  timeout: 1d
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
          serviceDependencies: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables: []
        when:
          pipelineStatus: Success
        strategy:
          matrix:
            service:
              - nginx
            env:
              - asset1
              - asset2
              - asset3
            exclude:
              - service: nginx
                env: asset2
    - stage:
        name: Deploy to QA
        identifier: Deploy_to_QA
        description: ""
        type: Deployment
        spec:
          serviceConfig:
            useFromStage:
              stage: Deploy
          infrastructure:
            environmentRef: qa
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: harnessse
                namespace: qa
                releaseName: release-<+INFRA_KEY>
            allowSimultaneousDeployments: true
          execution:
            steps:
              - step:
                  type: JiraUpdate
                  name: Update Jira
                  identifier: Update_JIRA
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.Deploy.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    fields:
                      - name: Comment
                        value: "\"Deploy to QA\" started"
                  timeout: 1d
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - stepGroup:
                  name: Tests
                  identifier: Tests
                  steps:
                    - parallel:
                        - step:
                            type: ShellScript
                            name: Regression Tests
                            identifier: Regression_Tests
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: echo "Regression Tests"
                              environmentVariables: []
                              outputVariables: []
                              executionTarget: {}
                            timeout: 10m
                        - step:
                            type: ShellScript
                            name: Selenium
                            identifier: Selenium
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: echo "Selenium"
                              environmentVariables: []
                              outputVariables: []
                              executionTarget: {}
                            timeout: 10m
                        - step:
                            type: ShellScript
                            name: JMeter
                            identifier: JMeter
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: echo "JMeter"
                              environmentVariables: []
                              outputVariables: []
                              executionTarget: {}
                            timeout: 10m
              - step:
                  type: JiraUpdate
                  name: Update Jira
                  identifier: Update_Jira
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.Deploy.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    fields:
                      - name: Comment
                        value: QA Tests Successfully Passed
                  timeout: 1d
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
          serviceDependencies: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
    - stage:
        name: Jira Approval
        identifier: Approval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: Jira Approval
                  identifier: jiraApproval
                  type: JiraApproval
                  timeout: 2h
                  spec:
                    approvalCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions:
                          - key: Status
                            operator: equals
                            value: Approved
                    rejectionCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions: []
                    connectorRef: account.Harness_JIRA
                    projectKey: HD
                    issueType: Story
                    issueKey: <+pipeline.stages.Deploy.spec.execution.steps.Open_Jira_Ticket.issue.key>
                  failureStrategies: []
          serviceDependencies: []
        tags: {}
    - stage:
        name: Deploy to Prod
        identifier: Deploy_to_Prod
        description: ""
        type: Deployment
        spec:
          serviceConfig:
            useFromStage:
              stage: Deploy
          infrastructure:
            environmentRef: qa
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: harnessse
                namespace: e2e-prod
                releaseName: release-<+INFRA_KEY>
            allowSimultaneousDeployments: false
          execution:
            steps:
              - step:
                  type: JiraUpdate
                  name: Update Jira
                  identifier: Update_JIRA
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.Deploy.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    fields:
                      - name: Comment
                        value: "\"Deploy to Prod\" started"
                  timeout: 1d
              - stepGroup:
                  name: Canary Deployment
                  identifier: canaryDepoyment
                  steps:
                    - step:
                        name: Canary Deployment
                        identifier: canaryDeployment
                        type: K8sCanaryDeploy
                        timeout: 10m
                        spec:
                          instanceSelection:
                            type: Count
                            spec:
                              count: 1
                          skipDryRun: false
                    - step:
                        type: Http
                        name: Postman HTTP Check
                        identifier: Postman_HTTP_Check
                        spec:
                          url: https://harness.io
                          method: GET
                          headers: []
                          outputVariables: []
                        timeout: 10s
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec:
                          skipDryRun: false
                        when:
                          stageStatus: All
                        failureStrategies: []
                  rollbackSteps:
                    - step:
                        name: Canary Delete
                        identifier: rollbackCanaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
              - stepGroup:
                  name: Primary Deployment
                  identifier: primaryDepoyment
                  steps:
                    - step:
                        name: Rolling Deployment
                        identifier: rollingDeployment
                        type: K8sRollingDeploy
                        timeout: 10m
                        spec:
                          skipDryRun: false
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: MarkAsSuccess
                  rollbackSteps:
                    - step:
                        name: Rolling Rollback
                        identifier: rollingRollback
                        type: K8sRollingRollback
                        timeout: 10m
                        spec: {}
              - stepGroup:
                  name: Terraform CleanUp
                  identifier: TF_CleanUp
                  steps:
                    - parallel:
                        - step:
                            type: TerraformDestroy
                            name: TF Destroy AWS
                            identifier: Tf_Destroy_S3
                            spec:
                              provisionerIdentifier: tfawss31
                              configuration:
                                type: InheritFromApply
                            timeout: 10m
                        - step:
                            type: TerraformDestroy
                            name: TF Destroy Az
                            identifier: TF_Destroy_AzBlob
                            spec:
                              provisionerIdentifier: tfazblob1
                              configuration:
                                type: InheritFromApply
                            timeout: 10m
                  when:
                    stageStatus: All
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
                  spec: {}
            rollbackSteps:
              - step:
                  type: K8sRollingRollback
                  name: Rollback
                  identifier: Rollback
                  spec:
                    skipDryRun: false
                  timeout: 10m
          serviceDependencies: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
  properties:
    ci:
      codebase:
        connectorRef: demo
        repoName: demo
        build: <+input>
